@inproceedings{minisy2020mm,
    author     = {Mondok, Mil\'an and V\"or\"os, Andr\'as},
    title      = {Abstraction-Based Model Checking of Linear Temporal Properties},
    year       = {2020},
    booktitle  = {Proceedings of the 27th PhD Mini-Symposium},
    location   = {Budapest, Hungary},
    publisher  = {Budapest University of Technology and Economics, Department of Measurement and Information Systems},
    editor     = {Renczes, Bal\'azs},
    pages      = {29--32},

    type       = {Local event},
    url_pdf    = {publications/minisy2020mm.pdf},
    abstract   = {Even though the expressiveness of linear temporal logic (LTL) supports engineering application, model checking of such properties is a computationally complex task and state space explosion often hinders successful verification. LTL model checking consists of constructing automata from the property and the system, generating the synchronous product of the two automata and checking its language emptiness. We propose a novel LTL model checking algorithm that uses abstraction to tackle the challenge of state space explosion. This algorithm combines the advantages of two commonly used model checking approaches, counterexample-guided abstraction refinement and automata theoretic LTL model checking. The main challenge in combining these is the refinement of "lasso"-shaped counterexamples, for which task we propose a novel refinement strategy based on interpolation.},
}

@InProceedings{facs23,
author="Graics, Bence
and Mondok, Mil{\'a}n
and Moln{\'a}r, Vince
and Majzik, Istv{\'a}n",
editor="C{\'a}mara, Javier
and Jongmans, Sung-Shik",
title="Model-Based Testing ofÂ Asynchronously Communicating Distributed Controllers",
booktitle="Formal Aspects of Component Software",
year="2024",
publisher="Springer Nature Switzerland",
address="Cham",
pages="23--44",
abstract="Programmable controllers are gaining prevalence even in distributed safety-critical infrastructures, e.g., in the railway and aerospace industries. Such systems are generally integrated using multiple loosely-coupled reactive components and must satisfy various critical requirements. Thus, their systematic testing is an essential task, which can be encumbered by their distributed characteristics. This paper presents a model-based integration test generation approach leveraging hidden formal methods based on the collaborating statechart models of the components. Statecharts can be integrated using various composition modes (e.g., synchronous and asynchronous) and then transformed (via a symbolic transition systems formalism -- XSTS) into the input formalisms of model checker back-ends, namely UPPAAL, Theta and Spin in an automated way. The model checkers are utilized for test generation based on multiple coverage criteria. The approach is implemented in our open source Gamma Statechart Composition Framework and evaluated on industrial-scale distributed controller subsystems from the railway industry.",
isbn="978-3-031-52183-6",
url="https://link.springer.com/chapter/10.1007/978-3-031-52183-6_2",
doi="10.1007/978-3-031-52183-6_2"
}

@InProceedings{svcomp24-theta,
author="Bajczi, Levente
and Telbisz, Csan{\'a}d
and Somorjai, M{\'a}rk
and {\'A}d{\'a}m, Zs{\'o}fia
and Dobos-Kov{\'a}cs, Mih{\'a}ly
and Szekeres, D{\'a}niel
and Mondok, Mil{\'a}n
and Moln{\'a}r, Vince",
editor="Finkbeiner, Bernd
and Kov{\'a}cs, Laura",
title="Theta: Abstraction Based Techniques for Verifying Concurrency (Competition Contribution)",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2024",
publisher="Springer Nature Switzerland",
address="Cham",
pages="412--417",
abstract="Theta is a model checking framework, with a strong emphasis on effectively handling concurrency in software using abstraction refinement algorithms. In SV-COMP 2024, we use 1) an abstraction-aware partial order reduction; 2) a dynamic statement reduction technique; and 3) enhanced support for call stacks to handle recursive programs. We integrate these techniques in an improved architecture with inherent support for portfolio-based verification using dynamic algorithm selection, with a diverse selection of supported SMT solvers as well. In this paper we detail the advances of Theta regarding concurrent and recursive software support.",
isbn="978-3-031-57256-2",
url="https://link.springer.com/chapter/10.1007/978-3-031-57256-2_30",
doi="10.1007/978-3-031-57256-2_30"
}

@InProceedings{svcomp24-emergentheta,
author="Bajczi, Levente
and Szekeres, D{\'a}niel
and Mondok, Mil{\'a}n
and {\'A}d{\'a}m, Zs{\'o}fia
and Somorjai, M{\'a}rk
and Telbisz, Csan{\'a}d
and Dobos-Kov{\'a}cs, Mih{\'a}ly
and Moln{\'a}r, Vince",
editor="Finkbeiner, Bernd
and Kov{\'a}cs, Laura",
title="EmergenTheta: Verification Beyond Abstraction Refinement (Competition Contribution)",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2024",
publisher="Springer Nature Switzerland",
address="Cham",
pages="371--375",
abstract="Theta is a model checking framework conventionally based on abstraction refinement techniques. While abstraction is useful for a large number of verification problems, the over-reliance on the technique led to Theta being unable to meaningfully adapt. Identifying this problem in previous years of SV-COMP has led us to create EmergenTheta, a sandbox for the new approaches we want Theta to support. By differentiating between mature and emerging techniques, we can experiment more freely without hurting the reliability of the overall framework. In this paper we detail the development route to EmergenTheta, and its first debut on SV-COMP'24 in the ReachSafety category.",
isbn="978-3-031-57256-2",
url="https://link.springer.com/chapter/10.1007/978-3-031-57256-2_23",
doi="10.1007/978-3-031-57256-2_23"
}

@inproceedings{minisy2024mm,
    author     = {Mondok, Mil\'an and Moln\'ar, Vince},
    title      = {Efficient Manipulation of Logical Formulas as Decision Diagrams},
    year       = {2024},
    booktitle  = {Proceedings of the 31st PhD Mini-Symposium},
    location   = {Budapest, Hungary},
    publisher  = {Budapest University of Technology and Economics, Department of Measurement and Information Systems},
    editor     = {Renczes, Bal\'azs},
    pages      = {61--65},

    type       = {Local event},
    url_pdf    = {publications/minisy2024mm.pdf},
    abstract   = {Constraint solving and the manipulation of Satisfiability Modulo Theories (SMT) formulas is a fundamental task in symbolic model checking. SMT solvers have proven to be efficient tools in exploiting the high expressive power and flexibility offered by SMT formulas. Decision diagram based approaches have also gained popularity for their capability to represent all solutions in a compact way and are used in numerous efficient algorithms. However, there is a gap between these two approaches. In this paper, we present a novel data structure that can combine the flexibility of SMT formulas and the power of SMT solvers with the efficient representation of the solutions. This data structure is a blend of decision diagrams and SMT formulas: it allows us to handle logical formulas as decision diagrams, leveraging both the power of SMT solvers and the advantages of diagram representation. The compatibility with decision diagrams allows the integration of efficient algorithms working on the two different representations. When discussing the benefits of this approach, we also emphasize how the intersection operation - a common problem in constraint solving - can be carried out more efficiently using lazy evaluation. We can also build on the same advantage in transitive closure calculations.},
}
